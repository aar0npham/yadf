{{- if and (ne .chezmoi.os "windows") (not .transient) -}}
#!/usr/bin/env bash

set -euo pipefail

declare -A osInfo
osInfo[Centos]=yum
osInfo[Arch]=pacman
osInfo[Debian]=apt-get
osInfo[Darwin]=brew

# declare os based on system
if [ -f /etc/os-release ]; then
    # freedesktop.org and systemd
    . /etc/os-release
    OS=$NAME
    # for some reason arch doesnt include VERSION_ID
    if [ -f /etc/arch-release ]; then
        VER=$(uname -r | cut -d "-" -f1)
    else
        VER=$VERSION_ID
    fi
    PKGSU=sudo
elif type lsb_release >/dev/null 2>&1; then
    # linuxbase.org
    OS=$(lsb_release -si)
    VER=$(lsb_release -sr)
elif [ -f /etc/lsb-release ]; then
    # For some versions of Debian/Ubuntu without lsb_release command
    . /etc/lsb-release
    OS=$DISTRIB_ID
    VER=$DISTRIB_RELEASE
elif [ -f /etc/debian_version ]; then
    # Older Debian/Ubuntu/etc.
    OS=Debian
    VER=$(cat /etc/debian_version)
else
    # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
    OS=$(uname -s)
    VER=$(uname -r)
fi

PKGI=install

case "$OS" in
    Centos*)
        PKGOPT=(-y)
        ;;
    Arch*)
        PKGI=-Sy
        PKGOPT=(--needed --noconfirm)
        ;;
    Debian)
        PKGOPT=
        ;;
    Darwin)
        PKGOPT=(--verbose --debug)
        ;;
esac

for os in ${!osInfo[@]}
do
    if [[ $OS == $os* ]]; then
        PKGMN=${osInfo[$os]}
    fi
done

SOURCE_DIR="{{ .chezmoi.sourceDir }}/bootstrap/configs"
BUNDLE_FILE="$SOURCE_DIR/Brewfile.in"
PACMAN_FILE="$SOURCE_DIR/Pacfile.in"
AUR_FILE="$SOURCE_DIR/Aurfile.in"

function echo_error() {
    printf '\n\033[31mERROR:\033[0m %s\n' "$1"
}

function echo_warning() {
    printf '\n\033[33mWARNING:\033[0m %s\n' "$1"
}

function echo_done() {
    printf '\n\033[32mDONE:\033[0m %s\n' "$1"
}

function echo_info() {
    printf '\n\033[36m%s\033[0m\n' "$1"
}

function install() {
    if [[ $1 == "core" ]]; then
        echo_info "Installing pacman packages from ${PACMAN_FILE}..."
        xargs $PKGSU $PKGMN $PKGI ${PKGOPT[@]} < $PACMAN_FILE
        echo_done "Finished installing packages from ${PACMAN_FILE}"
    elif [[ $1 == "aur" ]]; then
        echo_info "Installing AUR packages from ${AUR_FILE} using yay ..."
        xargs yay $PKGI ${PKGOPT[@]} < $AUR_FILE
        echo_done "Finished installing packages from ${AUR_FILE}"
    elif [[ $1 == "osx" ]]; then
        xargs $PKGMN $PKGI ${PKGOPT[@]} < $BUNDLE_FILE
    else
        echo_info "Installing ${1} ..."
        sudo $PKGMN $PKGI ${PKGOPT[@]} $1
    fi
}

{{- if .personal }}
if [[ $OS == "Darwin" ]]; then
    echo "Using $BUNDLE_FILE"
    install osx
elif [[ $OS == "Arch"* ]]; then
    echo "Using $PACMAN_FILE and $AUR_FILE"
    install core && install aur
fi
{{ end -}}
{{ end -}}
