#!/usr/bin/env bash

set -xeuo pipefail

# setup defaults message for cron tasks
DEFAULT_MESSAGE="chores"
DEFAULT_PS="cron"
CURRTIME=$(date +%s)

# setup message files
GIT_CONFIG_ROOT=$(dirname "$(git config --global --get include.path)")
MSG_FILE="$GIT_CONFIG_ROOT/dot-commit-msg"

# get datetime
COMMITTIME=$(date +'%D %I:%M%p %ZGMT')
TASKNAME=
MESSAGE=

function pprint() {
    echo -e "$*"
    # echo -e "\e[1;36m$*\e[m" # cyan
}

# check if message files is recently modified, default time difference: 20h
# https://stackoverflow.com/a/28341234/8643197
check_if_modified_message(){

  [[ ! -f $MSG_FILE ]] && touch "$MSG_FILE"
  STALE=$(expr 20 \* 60 \* 60 )
  {{- if eq .chezmoi.os "linux" }}
  FILETIME=$(stat "$MSG_FILE" -c %Y)
  {{- else if eq .chezmoi.os "darwin" }}
  FILETIME=$(stat -t %s -f %m $MSG_FILE)
  {{- end }}

  if [ $(expr "$CURRTIME" - "$FILETIME" ) -lt "$STALE" ]; then
    return 0
  else
    return 1
  fi
}

define_message_body(){
  check_if_modified_message && MESSAGE=$(cat "$MSG_FILE") || MESSAGE=$DEFAULT_MESSAGE
  TASKNAME=$DEFAULT_PS
}

# https://stackoverflow.com/a/36332260/8643197
# should only run as cronjob instead of scripts
backup_dotfiles() {
  BACKUPDIR="$1"
  [[ -d "$BACKUPDIR" ]] || git clone git@github.com:aarnphm/dotfiles.git $BACKUPDIR 
  cd "$BACKUPDIR" && git fetch && git pull --recurse-submodules
}

autopush_dots() {

  # backup
  BACKUPLOC="/mnt/Centralized/documents/dotfiles"
  pprint "Backup dotfiles to $BACKUPLOC..."
  backup_dotfiles $BACKUPLOC

  # define message block here
  pprint "\nGet commit message..."
  define_message_body && cd "$($CHEZMOI_BIN source-path)"

  pprint "\nDumping installed packages to files..."
  {{- if eq .chezmoi.os "linux" }}
  # Check for new packages, and add it to both .local file
  yay -Qqen >| {{ .chezmoi.sourceDir }}/bootstrap/configs/Pacfile.local && yay -Qqem >| {{ .chezmoi.sourceDir }}/bootstrap/configs/Aurfile.local
  {{- else }}
  brew bundle dump --file={{ .chezmoi.sourceDir }}/bootstrap/configs/Brewfile
  {{- end }}

  # Check if upstream, else not pull
  if [ "$(git rev-parse @)" == "$(git merge-base @ "${1:-'@{u}'}")" ]; then
    git pull --recurse-submodules
  fi

  # execute scripts
  git add -f -v . && git commit -am "[$TASKNAME] $COMMITTIME: $MESSAGE" && git push --all
}

autopush_dots "$@"
# vim: set ft=sh.gohtmltmpl ts=2 sw=2 tw=0 et :
