#!/usr/bin/env bash
set -euo pipefail

trap 'exit' INT

##############################################
# Variables
##############################################

{{- if not .personal }}
SOURCE_DIR="${SOURCE_DIR:-$(pwd)}"
{{- else }}
SOURCE_DIR="${SOURCE_DIR:-$(chezmoi source-path)}"
{{- end }}
BUNDLE_FILE="$SOURCE_DIR/Brewfile.in"
PACMAN_FILE="$SOURCE_DIR/Pacfile.in"
AUR_FILE="$SOURCE_DIR/Aurfile.in"

##############################################
# Functions
##############################################

{{- if eq .chezmoi.os "darwin" }}
export PKGMN=brew
{{- else if and (.personal) (eq .chezmoi.os "linux") }}
export PKGOPT=(--needed --noconfirm)
export PKGI=-Sy
export PKGR=-Rns
export PKGMN=pacman
{{- end}}

function echo_error() {
    printf '\n\033[31mERROR:\033[0m %s\n' "$1"
}

function echo_warning() {
    printf '\n\033[33mWARNING:\033[0m %s\n' "$1"
}

function echo_done() {
    printf '\n\033[32mDONE:\033[0m %s\n' "$1"
}

function echo_info() {
    printf '\n\033[36m%s\033[0m\n' "$1"
}

function __install() {
    if [[ $1 == "core" ]]; then
        echo_info "Installing pacman packages from ${PACMAN_FILE}..."
        xargs sudo $PKGMN $PKGI ${PKGOPT[@]} < $PACMAN_FILE
        echo_done "Finished installing packages from ${PACMAN_FILE}"
    elif [[ $1 == "aur" ]]; then
        echo_info "Installing AUR packages from ${AUR_FILE} using yay ..."
        xargs yay $PKGI ${PKGOPT[@]} < $AUR_FILE
        echo_done "Finished installing packages from ${AUR_FILE}"
    elif [[ $1 == "osx" ]]; then
        xargs brew install < $BUNDLE_FILE
    else
        echo_info "Installing ${1} ..."
        sudo $PKGMN $PKGI $1
    fi
}

##############################################
# Installation here
##############################################

{{- if eq .chezmoi.os "darwin" }}
echo "Using $BUNDLE_FILE"
__install osx
{{- else if eq .chezmoi.os "linux" }}
echo "Using $PACMAN_FILE and $AUR_FILE"
__install core && __install aur
{{- end }}
